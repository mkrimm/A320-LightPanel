; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

; #############################################################################
; ### PlatformIO Project Configuration File                                 ###
; #############################################################################

[platformio]
name = A320_LightPanel
description = This is a project for the A320 LightPanel which can appear as an joystick under Windows.

; #############################################################################
; ### Options - parameters that can be reused in one or more enviroments    ###
; #############################################################################

[options]
platform = atmelavr
board = micro
framework = arduino
lib_deps = mheironimus/Joystick@^2.1.1
build_flags = -std=c++17
unittesting_buildflag = -D unitTesting
generic_hw_buildflag = -D generic_hw
coverage_buildflag =  -lgcov    --coverage  -Og
selected_tests = test_logger_arduino*

; #############################################################################
; ### Settings Common to all environments                                   ###
; #############################################################################

[env]
lib_ldf_mode = deep

; #############################################################################
; ### Local and Cloud Unittesting : SELECTED generic unittests              ###
; #############################################################################

; [env:selected_generic_unittests]
; platform = native
; lib_deps = ${options.lib_deps}

; build_flags =
;   ${options.unittesting_buildflag}
;   ${options.generic_hw_buildflag}
;   ${options.coverage_buildflag}

; test_framework = unity
; test_filter = ${options.selected_tests}

; #############################################################################
; ### Local and Cloud Unittesting : ALL generic unittests                   ###
; #############################################################################

; [env:all_generic_unittests]
; platform = native
; lib_deps = ${options.lib_deps}
; build_flags =
;   ${options.unittesting_buildflag}
;   ${options.generic_hw_buildflag}
;   ${options.coverage_buildflag}

; test_framework = unity
; test_filter = test_generic*
; check_src_filters =
;     lib/*
;     src/*
;     test/*

; #############################################################################
; ### Arduino Mirco environmet                                              ###
; #############################################################################

[env:micro]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
board_build.mcu = atmega32u4
board_build.f_cpu = 16000000L
lib_deps = ${options.lib_deps}
board_build.usb_product = "A320_LightPanel"
build_flags = ${options.build_flags}
extra_scripts = pre:.github/workflows/buildinfo.py

; #############################################################################
; ### Local Application build                                               ###
; #############################################################################

[env:target_application]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
lib_deps = ${options.lib_deps}
extra_scripts = pre:.github/workflows/buildinfo.py

; #############################################################################
; ### Target Unit Tests                                                     ###
; #############################################################################

[env:target_selected_unittests]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
lib_deps = ${options.lib_deps}
build_flags = ${options.unittesting_buildflag}
test_framework = unity
test_filter = ${options.selected_tests}

; #############################################################################
; ### Cloud Application build                                               ###
; #############################################################################

[env:production_application]
platform = ${options.platform}
board = ${options.board}
framework = ${options.framework}
lib_deps = ${options.lib_deps}